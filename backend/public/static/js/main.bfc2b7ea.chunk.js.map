{"version":3,"sources":["imgs/slot_machine.png","imgs/machine_animate.gif","imgs/jackpot.png","imgs/nomoney.png","config/config.js","views/Answers.js","views/Game.js","views/WelcomeScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","config","Answers","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","workerId","assignmentId","showForm","postResults","bind","assertThisInitialized","_this2","keys","length","alert","fetch","method","body","JSON","stringify","headers","Accept","Content-Type","then","data","json","msg","setState","catch","e","console","log","_this3","react_default","a","createElement","id","onChange","q1","target","options","selectedIndex","value","q2","q3","q4","q5","q6","onClick","preventDefault","Component","Game","reward","advice","isGambling","tutorial","end","roundCounter","playRound","isTutorialOver","choices","response","err","index","chance","Math","random","prob","machines","push","setTimeout","_this4","_this5","blurClass","Answers_Answers","className","map","machine","i","key","href","src","machinePng","alt","mahineAnimate","includes","jackpot","nomoney","isGameOver","WelcomeScreen","onEnd","App","currScreen","urlParams","URLSearchParams","window","location","search","get","hitId","obj","WelcomeScreen_WelcomeScreen","finishTutorial","Game_Game","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bfc2b7ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slot_machine.064af86e.png\";","module.exports = __webpack_public_path__ + \"static/media/machine_animate.bdcc98e5.gif\";","module.exports = __webpack_public_path__ + \"static/media/jackpot.d851cc58.png\";","module.exports = __webpack_public_path__ + \"static/media/nomoney.980307d7.png\";","export const config = {\n    apiUrl: \"/node/Game/\" //\"http://localhost:3001/\"\n};","import React, { Component } from 'react';\nimport '../App.css';\nimport {config} from '../config/config.js';\n\nexport default class Answers extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            workerId: this.props.workerId,\n            assignmentId: this.props.assignmentId,\n            showForm: true\n        }\n\n        this.postResults = this.postResults.bind(this);\n    }\n\n    postResults() {\n        if (Object.keys(this.state).length < 9) {\n            alert(\"please fill all the questions.\");\n            return;\n        }\n        \n        fetch(config.apiUrl + \"postAnswers\", {\n            method: 'POST',\n            body: JSON.stringify(this.state),\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            }\n          })\n          .then((data) => data.json())\n          .then((data) => {\n              if (data.msg == \"ok\") {\n                  this.setState({showForm: false});\n              }\n          })\n          .catch((e) => console.log(e));\n    }\n\n    render() { \n        return (\n            <div>\n                {this.state.showForm && <form id=\"answers\">\n                    <h1>Questionarie</h1>\n                    <label>\n                        <span>How helpful was the helper (1 - not at all, 5 - very much)?</span>\n                        <select onChange={(e) => this.setState({q1: e.target.options[e.target.selectedIndex].value})}>\n                            <option value={0}>-</option>                        \n                            <option value={1}>1</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5</option>\n                        </select>\n                    </label>\n                    <label>\n                        <span>Are you happy/satisfied with the helper (1 - not at all, 5 - very much)?</span>\n                        <select onChange={(e) => this.setState({q2: e.target.options[e.target.selectedIndex].value})}>\n                            <option value={0}>-</option>                        \n                            <option value={1}>1</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5</option>\n                        </select>\n                    </label>\n                    <label>\n                        <span>Will you be interested in using the helper again in the future (1 - not way, 5 - sure will)?</span>\n                        <select onChange={(e) => this.setState({q3: e.target.options[e.target.selectedIndex].value})}>\n                            <option value={0}>-</option>                        \n                            <option value={1}>1</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5</option>\n                        </select>\n                    </label>\n                    <label>\n                        <span>Will you recommend the helper to a friend (1 - not way, 5 - sure will)?</span>\n                        <select onChange={(e) => this.setState({q4: e.target.options[e.target.selectedIndex].value})}>\n                            <option value={0}>-</option>                        \n                            <option value={1}>1</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5</option>\n                        </select>\n                    </label>\n                    <label>\n                        <span>How much do you trust the helper (1 - absolutely don't, 5 - absolutely do)?</span>\n                        <select onChange={(e) => this.setState({q5: e.target.options[e.target.selectedIndex].value})}>\n                            <option value={0}>-</option>                        \n                            <option value={1}>1</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5</option>\n                        </select>\n                        <span>Please elaborate.</span>\n                        <textarea onChange={(e) => this.setState({q6: e.target.value})}></textarea>\n                    </label>\n                    <button onClick={(e)=> {\n                        e.preventDefault();\n                        this.postResults();\n                    }}>Send</button>\n                </form>}\n                {!this.state.showForm && <div><h2>Thank you for participating.</h2></div>}\n            </div>\n        ); \n    }\n}","import React, { Component } from 'react';\nimport '../App.css';\nimport machinePng from \"../imgs/slot_machine.png\";//'../imgs/machine.png';\nimport mahineAnimate from '../imgs/machine_animate.gif';\nimport jackpot from '../imgs/jackpot.png';\nimport nomoney from '../imgs/nomoney.png';\nimport Answers from './Answers.js';\nimport {config} from '../config/config.js';\n\nconst MAX_ROUNDS = 10;\n\nexport default class Game extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            reward: 0,\n            advice: null,\n            msg: \"\",\n            isGambling: false,\n            tutorial: 2,\n            end: false,\n            roundCounter: 1\n        }\n\n        this.playRound = this.playRound.bind(this);\n        this.isTutorialOver = this.isTutorialOver.bind(this);\n        this.choices = [];\n    }\n\n    componentWillMount() {\n        fetch(config.apiUrl + \"getAgentsAdvice?workerId=\" + this.props.workerId)\n        .then((response) => response.json())\n        .then((data) =>  {\n            this.setState({advice: data.advice});\n            this.advice = data.advice;\n        })\n        .catch((err) => console.log(err));\n    }\n    playRound(index) {\n        let chance = Math.random();\n        let prob = this.props.machines[index];\n        \n        if (this.state.tutorial <= 0) {\n            this.choices.push(index);\n        }\n        \n        this.setState({isGambling: true, msg: \"\", advice: null} ,() => {\n            setTimeout(()=> {\n                if (chance <= prob) {\n                    this.setState({\n                        reward: this.state.reward + 1,\n                        msg: \"Congratulations, you won a reward!\"\n                    });\n                } else {\n                    this.setState({\n                        msg: \"Sorry, didn't get a reward.\"\n                    });\n                }\n            }, 2000);\n        }    \n        );\n    }\n\n    isTutorialOver() {\n        if (this.state.tutorial == 0) {\n            this.setState({reward: 0, tutorial: -1}, () =>  alert(\"Now tutorial mode is over, the game begins!\"));\n        }\n    }\n\n    isGameOver() {\n        let prob = Math.random();\n        let probEnd = 0.2;\n\n        if (this.state.roundCounter > 3) {\n            if ((prob <= probEnd && this.state.tutorial < 0) || this.choices.length > MAX_ROUNDS) {\n                this.setState({end: true}, () => {\n                    this.props.postResults(this.choices, this.advice, this.state.reward);\n                })\n            }\n        }\n    }\n    render() {\n        let machines = this.props.machines;\n        let blurClass = (this.state.isGambling) ? 'blur-filter':'';\n\n        if (!this.state.end) {\n            return (\n                <div id=\"gui\">\n                    {this.state.tutorial > 0 && <h1>Tutorial mode</h1>}\n                    {this.isTutorialOver()}\n                    <div id=\"container\" className={blurClass}>\n                        <ul id=\"machines\">\n                            {\n                                machines.map((machine, i) => {\n                                    let advice = (this.state.advice == i) ? 'advice' : '';\n                                    return (\n                                        <li key={'l' + i} className={advice}>\n                                            <h2>Machine {i + 1}</h2>\n                                            <a href=\"#\" onClick={(e) => {this.playRound(i)}}>\n                                                <img src={machinePng} alt=\"machine\"/>\n                                            </a>\n                                        </li>\n                                    );\n                                })    \n                            } \n                        </ul>\n                        <h2 className=\"message\">Your reward is: {this.state.reward} </h2>\n                        {this.state.tutorial < 0 && <h2 className=\"message\">Current round: {this.state.roundCounter}</h2>}\n                    </div>\n                    {this.state.isGambling && \n                        <div id=\"animate\">\n                            {!this.state.msg && <img src={mahineAnimate} alt=\"animate\" />}\n                            {this.state.msg.includes(\"won\") && <img src={jackpot} alt='results'/>}\n                            {this.state.msg.includes(\"Sorry\") && <img src={nomoney} alt='results'/>}\n                            <h2 className=\"message\">{this.state.msg} </h2>\n                            {this.state.msg && <button onClick={() => this.setState({\n                                        isGambling: false, \n                                        advice: this.advice, \n                                        tutorial: this.state.tutorial - 1,\n                                        roundCounter: (this.state.tutorial < 0) ? this.state.roundCounter + 1: this.state.roundCounter},\n                                        this.isGameOver.bind(this))}>Next</button>}\n                        </div>\n                    }\n                </div>\n            )\n        } else {\n            return (\n                <div id=\"gui\">\n                    <h2>The game has ended !</h2>\n                    <h3>Final reward: {this.state.reward} Number of rounds: {this.state.roundCounter - 1}</h3>\n                    <h3>Please fill the questionarie below.</h3> \n                    <hr/>\n                    <Answers workerId={this.props.workerId} assignmentId={this.props.assignmentId}/>\n                </div>\n            )\n        }\n    }   \n}\n\n/*\n    How helpful was the helper? radio buttons <1..5>\n    What was your strategy? open question\n    Did you trust the helper? open question\n*/","import React, { Component } from 'react';\nimport '../App.css';\n\nexport default class WelcomeScreen extends Component {\n    render() { \n        return (\n            <div id=\"welcome\">\n                <h1>Welcome !</h1>\n                <p>In this task you will need to repeatedly choose a slot machine out of three available. Each machine gives you a virtual dollar with some probability (different for each machine) if activated. On each turn you will pick one of the machines that will be activated. After each round we will spin a wheel to decide whether there will be one more round or otherwise terminate the task. For each virtual dollar you accumulate you will receive one real cent as a bonus.</p>\n                <p>To assist you, there will be a helper that knows the winning probabilities of the three machines. On each round the helper will highlight the machine she believes you should choose. To be fully fair we disclose that the helper benefits from one of the machines, and every time you pick this machine (which we cannot disclose its identity) the helper will gain a cent (not at your expense).</p>\n                <p>In order to get you familiarized with the game, the first 2 rounds are tutorial rounds which will help you understand the game. If you win any reward during the tutorial rounds it will not be counted.</p>\n                <button onClick={(e)=>this.props.onEnd()}>Start</button>\n            </div>\n        ); \n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Game from './views/Game.js';\nimport WelcomeScreen from './views/WelcomeScreen.js';\nimport {config} from './config/config.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state =  {\n      currScreen: \"welcome\",\n    }\n  }\n\n  componentWillMount() {\n    // read worker's parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    const workerId = urlParams.get('workerId');\n    const assignmentId = urlParams.get('assignmentId');\n    const hitId = urlParams.get('hitId');\n\n    this.setState({\n      workerId: workerId,\n      assignmentId: assignmentId,\n      hitId: hitId,\n      data: \"\"\n    });\n\n    fetch(config.apiUrl + \"getDistributions?workerId=\" + workerId)\n    .then((response) => response.json())\n    .then((data) => this.setState({machines: data.machines}))\n    .catch((err) => console.log(err)); \n  }\n\n  finishTutorial() {\n    this.setState({currScreen: \"game\"});\n  }\n\n  postResults(choices, advice, reward) {\n    let obj = {\n      workerId: this.state.workerId,\n      assignmentId: this.state.assignmentId,\n      hitId: this.state.hitId,\n      advice: advice,\n      choices: choices,\n      reward: reward\n    }\n\n    fetch(config.apiUrl + \"postResults\", {\n      method: 'POST',\n      body: JSON.stringify(obj),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    })\n    .then((data) => data.json())\n    .then((data) => console.log(data))\n    .catch((e) => console.log(e));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.currScreen == \"welcome\" && <WelcomeScreen onEnd={this.finishTutorial.bind(this)} />}\n        {this.state.currScreen == \"game\" && <Game assignmentId={this.state.assignmentId} postResults={this.postResults.bind(this)} workerId={this.state.workerId} machines={this.state.machines} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n/*\n\n  results from each trail:\n    1. array of choices.\n    2. agent's advice.\n\n  backend sets:\n    1. agent's advice - which machine.\n    2. distributions for the machines.\n\n  organize db as json\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}